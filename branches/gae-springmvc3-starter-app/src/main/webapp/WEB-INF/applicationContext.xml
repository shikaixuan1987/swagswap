<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oxm="http://www.springframework.org/schema/oxm" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-2.5.xsd
						http://www.springframework.org/schema/oxm 
						http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
					    http://www.springframework.org/schema/tx 
					    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     					http://www.springframework.org/schema/aop 
     					http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


	<context:annotation-config/>

	<!--
		- This bean resolves specific types of exceptions to corresponding
		logical - view names for error views. The default behaviour of
		DispatcherServlet - is to propagate all exceptions to the servlet
		container: this will happen - here with all other types of exceptions.
	-->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.springframework.web.servlet.PageNotFound">pageNotFound</prop>
				<prop key="org.springframework.dao.DataAccessException">dataAccessFailure</prop>
				<prop key="org.springframework.transaction.TransactionException">dataAccessFailure</prop>
			</props>
		</property>
	</bean>

	<!--
		- The BeanNameViewResolver is used to pick up the visits view name
		(below). - It has the order property set to 2, which means that this
		will - be the first view resolver to be used after the delegating
		content - negotiating view resolver.
	-->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"
		p:order="1" />
	<!--

		- This bean configures the 'prefix' and 'suffix' properties of -
		InternalResourceViewResolver, which resolves logical view names -
		returned by Controllers. For example, a logical view name of "vets" -
		will be mapped to "/WEB-INF/jsp/vets.jsp".
	-->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" p:order="2" />

	<!--
		- The AtomView rendering a Atom feed of the visits <bean id="visits"
		class="org.springframework.samples.petclinic.web.VisitsAtomView"/>

		<bean id="vets"
		class="org.springframework.web.servlet.view.xml.MarshallingView">
		<property name="contentType"
		value="application/vnd.springsource.samples.petclinic+xml"/> <property
		name="marshaller" ref="marshaller"/> </bean> <oxm:jaxb2-marshaller
		id="marshaller"> <oxm:class-to-be-bound
		name="org.springframework.samples.petclinic.Vets"/>
		</oxm:jaxb2-marshaller>
	-->

	<!--
		- Message source for this context, loaded from localized "messages_xx"
		files. - Could also reside in the root application context, as it is
		generic, - but is currently just used within PetClinic's web tier.
		<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource"
		p:basename="messages"/>
	-->
	
	
	<bean id="persistenceManagerFactory"
		class="org.springframework.orm.jdo.LocalPersistenceManagerFactoryBean">
		<!-- <property name="configLocation" value="classpath:kodo.properties"/>  -->
		
		<property name="jdoProperties">
			<props>
				<prop key="javax.jdo.PersistenceManagerFactoryClass">
					org.datanucleus.store.appengine.jdo.DatastoreJDOPersistenceManagerFactory
				</prop>
				<prop key="javax.jdo.option.ConnectionURL">appengine</prop>
				<prop key="javax.jdo.option.NontransactionalRead">true</prop>
				<prop key="javax.jdo.option.NontransactionalWrite">true</prop>
				<prop key="javax.jdo.option.RetainValues">true</prop>
				<prop key="datanucleus.appengine.autoCreateDatastoreTxns">true</prop>
			</props>
		</property>
	</bean>

	<tx:annotation-driven transaction-manager="txManager" />

	<bean id="txManager" class="org.springframework.orm.jdo.JdoTransactionManager">
		<property name="persistenceManagerFactory" ref="persistenceManagerFactory" />
	</bean>

	<bean id="swagItemDao" class="com.swagswap.dao.SwagItemDaoImpl" >
		<property name="persistenceManagerFactory" ref="persistenceManagerFactory"/>
	</bean>
	
	<bean id="swagImageDao" class="com.swagswap.dao.SwagImageDaoImpl" >
		<property name="persistenceManagerFactory" ref="persistenceManagerFactory"/>
	</bean>
	
	<bean id="swagItemService" class="com.swagswap.service.SwagItemServiceImpl" />

	
</beans>


<!-- This is inspired by http://googleappengine.googlecode.com/svn/trunk/java/demos/new_project_template/build.xml -->

<project name="swagswap" default="war">

	<!-- For war file naming -->
	<property name="version" value="0.1" />

	<!--TODO try reading GAE_HOME env var first-->

	<!-- When you copy this template to your working directories, change the
		value of appengine.sdk accordingly.  You may also want to use Ant's
		property file feature, allowing each developer to have their own
		local property file with the path to the SDK from that workspace. -->
	<property name="appengine.sdk"
		location="D:\downloads\appengine-java-sdk-1.2.5" />

	<!-- Check that the SDK value is set and seems sane, so we can give a nicer
		error if not.  -->
	<fail
		message="Please define the appengine.sdk property to point to your SDK directory">
		<condition>
			<not>
				<and>
					<isset property="appengine.sdk" />
					<available
						file="${appengine.sdk}/config/user/ant-macros.xml" />
				</and>
			</not>
		</condition>
	</fail>

	<!-- Pick up the Ant macros and taskdefs for App Engine -->
	<import file="${appengine.sdk}/config/user/ant-macros.xml" />


	<!-- Remote debug port for dev_appserver -->
	<property name="debug.port" value="5005" />

	<!-- HTTP port for dev_appserver -->
	<property name="http.port" value="8080" />

	<!-- Name of log file to write logs to -->
	<property name="log.file" value="app.log" />

	<!-- Number of days worth of logs to retrieve -->
	<property name="log.days" value="2" />


	<!-- Change if you like e.g. "war" better than "www" for the output -->
	<property name="war.dir"
		location="target/${ant.project.name}-${version}" />

	<target name="war" depends="compile, copyResources"
		description="Assemble the application directory">
		<mkdir dir="${war.dir}/WEB-INF/lib" />
		<copy todir="${war.dir}/WEB-INF/lib" flatten="true">
			<fileset dir="${appengine.sdk}/lib/user">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<enhance_war war="${war.dir}" />
	</target>

	<target name="copyResources"
		description="copy static webapp resources to target">
		<copy todir="${war.dir}">
			<fileset dir="src/main/webapp">
				<exclude name="**/.svn/**" />
				<exclude name="**/*~" />
			</fileset>
		</copy>
	</target>


	<path id="classpath">
		<fileset dir="${appengine.sdk}/lib/user">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${appengine.sdk}/lib/shared">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="src/main/webapp/WEB-INF/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="compile"
		description="Compile the application servlet code">
		<mkdir dir="${war.dir}/WEB-INF/classes" />
		<javac srcdir="src/main/java" destdir="${war.dir}/WEB-INF/classes"
			debug="true" classpath="${classpath}">
			<compilerarg value="-Xlint" />
			<classpath>
				<fileset dir="${appengine.sdk}/lib/user">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${appengine.sdk}/lib/shared">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="src/main/webapp/WEB-INF/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="clean" description="Force a clean slate to rebuild">
		<delete dir="${war.dir}" />
	</target>

	<target name="runserver" depends="war"
		description="Run the dev_appserver">
		<dev_appserver war="${war.dir}" port="${http.port}" />
	</target>

	<!--dev server doesn't stop when you kill the runserver ant task on windows so
		I borrowed this http://byteco.de/2009/04/30/killing-java-process-from-ant-in-windows/ -->
	<target name="stopserver(windows)">
		<property environment="env" />
		<exec executable="${env.JAVA_HOME}/bin/jps"
			output="pid.out.file" />
		<loadfile srcfile="pid.out.file" property="pid.out">
			<filterchain>
				<linecontains>
					<contains value="DevAppServerMain" />
				</linecontains>
				<tokenfilter>
					<deletecharacters chars="DevAppServerMain" />
					<trim />
					<ignoreblank />
				</tokenfilter>
				<striplinebreaks />
			</filterchain>
		</loadfile>
		<echo>
			Killing appengine java process with PID - "${pid.out}"
		</echo>
		<exec executable="tools/pskill">
			<arg value="${pid.out}" />
		</exec>
		<delete file="pid.out.file" />
	</target>

	<target name="debug" depends="war"
		description="Launches dev_appserver with remote debugging enabled">
		<echo
			message="Launching dev_appserver on Web port ${http.port}, Java remote debug port ${debug.port}" />
		<dev_appserver war="${war.dir}" port="${http.port}">
			<options>
				<arg value="--jvm_flag=-Xdebug" />
				<arg
					value="--jvm_flag=-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=${debug.port}" />
			</options>
		</dev_appserver>
	</target>

	<target name="update" depends="war"
		description="Uploads the application, including indexes">
		<appcfg action="update" war="${war.dir}" />
	</target>

	<target name="update_indexes" depends="war"
		description="Uploads only the application's indexes">
		<appcfg action="update_indexes" war="${war.dir}" />
	</target>

	<target name="rollback" depends="war"
		description="Rolls back any in-progress application update">
		<appcfg action="rollback" war="${war.dir}" />
	</target>

	<target name="request_logs"
		description="Downloads the application's logs">
		<appcfg action="request_logs" war="${war.dir}">
			<options>
				<arg value="--num_days=${log.days}" />
			</options>
			<args>
				<arg value="${log.file}" />
			</args>
		</appcfg>
	</target>

	<path id="test.classpath">
		<path refid="classpath"/>
		<pathelement location="${appengine.sdk}/lib/impl/appengine-api-stubs.jar"/>
		<pathelement location="${appengine.sdk}/lib/impl/appengine-local-runtime.jar"/>
		<fileset dir="src/test/lib">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${war.dir}/WEB-INF/classes"/>

	</path>
	


	<target name="compile-tests" depends="compile">
		<mkdir dir="target/test"/>
		<javac srcdir="src/test/java" destdir="target/test" 
				debug="true" classpathref="test.classpath">
			<compilerarg value="-Xlint" />
		</javac>
	</target>
	
	<target name="runtests">
		<junit printsummary="yes" haltonfailure="yes">
			<classpath>
				<pathelement location="${build.tests}" />
				<pathelement path="${war.dir}/WEB-INF/classes" />
			</classpath>
	
			<formatter type="plain" />
	
	<!-- 
			<test name="my.test.TestCase" haltonfailure="no"
				outfile="result">
				<formatter type="xml" />
			</test>
	 -->
			<batchtest fork="yes" todir="${reports.tests}">
				<fileset dir="src/test/java">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

</project>

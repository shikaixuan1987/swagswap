This will help you take in swagswap quickly:


=Installing and Running=

  * When you [http://code.google.com/p/swagswap/source/checkout check out swagswap in eclipse], eclipse the project settings should be recognized.  
  * You'll have to set an environment variable on your system called `GAE_HOME` to point to your appengine installation (1.2.5) and restart eclipse.  
You might have to adjust the referenced JDK.  
  * Start the app with 
    * `ant runserver` (and see the app at http://localhost:8080), 
    * `ant stopserver` to stop it on windows with .  On mac you still may have to kill the process (working on that) :(  
    * `ant debug` to run the server in debug mode so you can attach remotely in eclipse.  


=Running the Tests=

  * Run the unit tests with `ant runtests`.
  * You can run (or debug!) the tests from eclipse (right click on a test and Run as JUnit test) but you have to make sure you run ant compile-tests first (and every time you make any code changes).


=Navigating the Code=

  * The best place to start is in [http://code.google.com/p/swagswap/source/browse/trunk/src/main/java/com/swagswap/web/springmvc/controller/SwagItemController.java SwagItemController].  That is the RESTful Spring MVC annotated controller which defines REST endpoints (urls) and does the controlling with a minimum of code and no config file.  

  * The !SwagItemController uses [http://code.google.com/p/swagswap/source/browse/trunk/src/main/java/com/swagswap/service/SwagItemServiceImpl.java SwagItemServiceImpl] which for the most part simply delegates to !SwagItemDaoImpl.  The reason !SwagItemServiceImpl is  there can be seen in the save() method which is marked @Transactional for the atomic insertion of Items their child Images.  This is also the layer I'll do caching from.  

  * [http://code.google.com/p/swagswap/source/browse/trunk/src/main/java/com/swagswap/dao/SwagItemDaoImpl.java SwagItemDaoImpl] does the interaction with the DB.  It's straightforward but takes care of some rather messy things in it's last two methods.  

  * The other interesting thing is how images are streamed from the DB.  That can be seen in the [http://code.google.com/p/swagswap/source/browse/trunk/src/main/java/com/swagswap/web/springmvc/controller/SwagImageController.java SwagImageController] in the streamImageContent() method.  

  * It is called from JSP tags that trick the browser into thinking the dynamic calls are HTML img tags.  Look on [http://code.google.com/p/swagswap/source/browse/trunk/src/main/webapp/WEB-INF/jsp/listSwagItems.jsp listSwagItems.jsp] and search for showImage to see it called.


=Reporting Bugs and Issue Tracking=

  * Bug reports are welcome at http://code.google.com/p/swagswap/issues/list.

  * If you didn't already know about the [http://code.google.com/p/support/wiki/IssueTracker#Integration_with_version_control Google Code Issue Tracker and Subversion comment integration]

  * Check out the links to the diffs on two commits in, for example [http://code.google.com/p/swagswap/issues/detail?id=10&can=1 issue 10]:



Enjoy.